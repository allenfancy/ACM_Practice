package com.allen.dynamicprogram;
/**
 * @author allen
 *
 * 动态规划：
 * 	1.基本概念：
 * 		动态规划过程：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的。
 * 		这种多阶段最优化决策解决问题的过程就称为动态规划
 * 	2.基本的思想
 * 		将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一个子问题的解，为后一个子问题的求解提供了有用的信息。在求解任何一个子问题时，列出各种可能的局部解
 * 		通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各个子问题，最后一个子问题就是初始问题的解。
 *      由于动态规划解决的问题多数有重复子问题这个特点，为减少重复计算，对每个子问题只解决依次，将其不同阶段的不同状态保存在一个二维数组中。
 *  
 *  3.使用的情况
 *  	能采用动态规划求解的问题一般要具有3个性质：
 *  		1）最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。
 *  		2）无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。即：某状态以后的过程不会影响以前的状态，只与当前状态有关。
 *  		3）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划使用的必要条件）
 *  4.求解的基本步奏：
 *  	1.划分阶段：按照问题的时间或者空间特征，把问题分为若干个阶段。在划分阶段时，注意划分的阶段一定要是有序的或者是可排序的。否则问题就无法求解的
 *  	2.确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。
 *  	3.确定决策并写出状态移转方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。
 *  	4.寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。
 *  	一般，只需要解决问题的阶段、状态和状态转移决策确定。就写出状态转移方程式（包括边界条件）
 *  	分解步奏：
 *  	1.分析最优解的性质，并刻画其结构特征。
 *  	2.递归的定义最优解
 *  	3.以自底向上或者自顶向下得记忆化方式计算出最优值
 *  	4.根据计算最优值时得到的信息，构造问题的最优解
 * 
 */
public class DynamicProgramming {

}
